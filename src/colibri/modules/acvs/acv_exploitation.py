"""
AcvExploitationOnly class from Acv interface.
"""

from __future__ import annotations

from typing import Any, Dict, List, Optional

import numpy as np

from colibri.core import ProjectData
from colibri.core.fields import Field, Parameter
from colibri.interfaces.modules.acv import Acv
from colibri.utils.colibri_utils import Attachment
from colibri.utils.enums_utils import (
    ColibriProjectObjects,
    Units,
)


class AcvExploitationOnly(Acv):
    """Class representing a ACV exploitation."""

    def __init__(
        self,
        name: str,
        q_consumed: Optional[Dict[str, float]] = None,
        co2_impact: float = 0.0,
        project_data: Optional[ProjectData] = None,
    ) -> None:
        """Initialize a new AcvExploitationOnly instance."""
        if q_consumed is None:
            q_consumed: Dict[str, float] = dict()
        super().__init__(
            name=name, q_consumed=q_consumed, co2_impact=co2_impact
        )
        # TODO: Use define_field maybe with no role?
        self.carbon_to_electricity_ratio = 70.0  # kgC02/kWh
        self.project_data = self.define_parameter(
            name="project_data",
            default_value=project_data,
            description="Project data.",
            format=ProjectData,
            min=None,
            max=None,
            unit=Units.UNITLESS,
            attached_to=None,
            required=[
                Parameter(
                    name="layers",
                    default_value=[],
                    description="Layers of a boundary.",
                    format=List["Layer"],
                    min=None,
                    max=None,
                    unit=Units.UNITLESS,
                    attached_to=Attachment(
                        category=ColibriProjectObjects.ARCHETYPE,
                        class_name="Boundary",
                        from_element_object="Layer",
                    ),
                ),
                Parameter(
                    name="lca_impact_properties",
                    default_value=None,
                    description="Life cycle analysis (LCA) impact properties (matrix) of the layer."
                    "Rows are representing EN15804 impacts and columns LCA phase impacts.",
                    format=np.ndarray,
                    min=None,
                    max=None,
                    unit=Units.CO2_KILO_GRAM_EQUIVALENT,
                    attached_to=Attachment(
                        category=ColibriProjectObjects.ELEMENT_OBJECT,
                        from_archetype=True,
                        class_name="Layer",
                    ),
                ),
                Parameter(
                    name="installation_year",
                    default_value=1,
                    description="Installation year of the layer.",
                    format=int,
                    min=0,
                    max=100,
                    unit=Units.YEAR,
                    attached_to=Attachment(
                        category=ColibriProjectObjects.ELEMENT_OBJECT,
                        from_archetype=True,
                        class_name="Layer",
                    ),
                ),
                Parameter(
                    name="service_life",
                    default_value=50,
                    description="Reference life of the layer.",
                    format=int,
                    min=0,
                    max=100,
                    unit=Units.YEAR,
                    attached_to=Attachment(
                        category=ColibriProjectObjects.ELEMENT_OBJECT,
                        from_archetype=True,
                        class_name="Layer",
                    ),
                ),
            ],
        )

    def initialize(self) -> bool: ...

    def run(self, time_step: int, number_of_iterations: int) -> None: ...

    def end_iteration(self, time_step: int) -> None: ...

    def end_time_step(self, time_step: int) -> None: ...

    def end_simulation(self) -> None:
        self.co2_impact = self.carbon_to_electricity_ratio * sum(
            self.q_consumed.values()
        )

    def has_converged(self, time_step: int, number_of_iterations: int) -> bool:
        return True
